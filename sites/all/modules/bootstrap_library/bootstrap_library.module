<?php

/**
 * @file
 * Primarily Drupal hooks.
 */


/**
 * Implements hook_requirements().
 */
function bootstrap_library_requirements($phase) {
  // Create an array to hold Bootstrap requirements
  $requirements = array();

  // Check requirements during the runtime phase
  if ($phase == 'runtime') {
    // Check if the Bootstrap library is installed
    if (($library = libraries_detect('bootstrap')) && !empty($library['installed'])) {
      $requirements['boostrap_library_library'] = array(
        'title' => t('Bootstrap plugin'),
        'value' => t('Installed'),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $requirements['boostrap_library_library'] = array(
        'title' => t('Bootstrat plugin'),
        'value' => t('Not installed'),
        'description' => $library['error message'],
        'severity' => REQUIREMENT_ERROR,
      );
    }
    // Check if the site is running >= jQuery 1.7
    preg_match('/^(\d+)\.(\d+).*$/', $library['version'], $matches);
    if (($library = drupal_get_library('system', 'jquery')) && floatval($matches[1] .'.'. $matches[2]) >= 1.7) {
      $requirements['boostrap_library_jquery'] = array(
        'title' => t('Bootstrat version'),
        'value' => t('jQuery @version', array('@version' => $library['version'])),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $destination = drupal_get_destination();

      $requirements['boostrap_library_jquery'] = array(
        'title' => t('Bootstrap version'),
        'value' => t('jQuery @version', array('@version' => $library['version'])),
        'description' => t('Bootstrap requires jQuery 1.7 or greater. Configure <a href="@jquery_update">jQuery Update</a>.', array('@jquery_update' => url('admin/config/development/jquery_update', array('query' => $destination)))),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_init().
 */

function bootstrap_library_init() {
  $settings = variable_get('bootstrap_library_settings');
  if (bootstrap_library_check_path($settings['visibility']['visibility'], $settings['visibility']['pages'])) {
    libraries_load('bootstrap');
  }
}

/**
* Implementation of hook_menu().
*/
function bootstrap_library_menu() {
  // Admin settings.
  $items['admin/config/development/bootstrap_library'] = array(
    'title' => 'Boostrap Library',
    'description' => 'Configures Boostrap Library module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_library_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function bootstrap_library_check_path($visibility, $pages) {
  $pages = drupal_strtolower($pages);
  // Convert the Drupal path to lowercase
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
  }
  // When $block->visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
  // the block is displayed on all pages except those listed in $block->pages.
  // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
  // pages listed in $block->pages.
  $page_match = !($visibility xor $page_match);
  return $page_match;
}

/**
 * Module settings form.
 */
function bootstrap_library_settings($form, &$form_state) {
  $settings = variable_get('bootstrap_library_settings');

  // Per-path visibility.
  $options['visibility'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pages'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options['visibility']['visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Activate on specific pages'),
    '#options' => array(
      0 => t('All pages except those listed'),
      1 => t('Only the listed pages'),
    ),
    '#default_value' => $settings['visibility']['visibility'],
  );
  $options['visibility']['pages'] = array(
    '#type' => 'textarea',
    '#title' => 'List of pages to activate',
    '#default_value' => $settings['visibility']['pages'],
    '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
  );

  $options['#tree'] = TRUE;
  $form['bootstrap_library_settings'] = $options;

  // Disable automatic defaults, which don't work with nested values.
  return system_settings_form($form, FALSE);
}

/**
 * Implements hook_libraries_info().
 */
function bootstrap_library_libraries_info() {
  $libraries['bootstrap'] = array(
    'name' => 'Bootstrap',
    'vendor url' => 'http://getbootstrap.com/',
    'download url' => 'http://getbootstrap.com/',
    'version arguments' => array(
      'file' => 'js/bootstrap.js',
      // 3.x.x: Botstrap v3.0.3
      'pattern' => '/Bootstrap\s+v?([0-9\.]+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'js/bootstrap.js',
      ),
      'css' => array(
        'css/bootstrap.css',
        'css/bootstrap-theme.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Check if the Bootstrap library is installed.
 *
 * @return
 *   A boolean indicating the installed status.
 */
function bootstrap_library_installed() {
  if (($library = libraries_detect('bootstrap')) && !empty($library['installed'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the Bootstrap library has been loaded.
 *
 * @return
 *   A boolean indicating the loaded status.
 */
function bootstrap_library_loaded() {
  if (($library = libraries_load('bootstrap')) && !empty($library['loaded'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
